//一棵圣诞树记作根节点为 root 的二叉树，节点值为该位置装饰彩灯的颜色编号。
//请按照从左到右的顺序返回每一层彩灯编号，每一层的结果记录于一行。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//因为是层序遍历，所以需要借助辅助队列；
class Solution {
public:
    vector<vector<int>> decorateRecord(TreeNode* root) {
        queue<TreeNode*> que;
        vector<vector<int>>res;
        if(!root)return {};
        que.push(root);
        while(!que.empty()){
            vector<int> tmp;
            for(int i=que.size(); i>0;i--){
                TreeNode* cur=que.front();
                tmp.push_back(cur->val);
                que.pop();
                if(cur->left)que.push(cur->left);
                if(cur->right)que.push(cur->right);
            }
            res.push_back(tmp);
        }
        return res;
    }
};


//在上述代码实现的过程中，注意for循环、以及root原本为空的情况；