//给你一个非负整数 x ，计算并返回 x 的 算术平方根 。

//由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。

//注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 


//尝试每次都除以2；然后进行平方运算进行比较；x的平方的算数平方根一定是在0-x之间的某个数；
class Solution {
public:
    int mySqrt(int x) {
        int left=0;
        int right=x;
        while(left<=right){
            int mid=(left+right)/2;
            if((long long)mid*mid==x || ((long long)mid*mid<x&&((long long)(mid+1)*(mid+1)>x)))return mid;
            else if((long long)mid*mid>x){
                right=mid-1;
            }else if((long long)mid*mid<x){
                left=mid+1;
            }
        }
        return 0;
    }
};

/*
使用上述的代码进行求解的时候会发现报错：
Line 8: Char 20: runtime error: signed integer overflow: 1073697799 * 1073697799 cannot be represented in type 'int' (solution.cpp)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20
可能是因为mid*mid会导致溢出；所以将类型转化为Long long；
*/

//官方给出的二分查找思想解题：
class Solution {
public:
    int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long long)mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
};

//官方还给出了一个方法：借助对数log的转换直接求解；
class Solution {
public:
    int mySqrt(int x) {
        if (x == 0) {
            return 0;
        }
        int ans = exp(0.5 * log(x));
        return ((long long)(ans + 1) * (ans + 1) <= x ? ans + 1 : ans);
    }
};



