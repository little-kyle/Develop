//斐波那契数列

//递归的思想；或者动态规划思想；
class Solution {
public:
    int fib(int n) {
        if(n<2)return n;
        return fib(n-1)+fib(n-2);
    }
};

//优化的动态规划思想：
class Solution {
public:
    int fib(int n) {
        int MOD = 1000000007;
        if(n<2) return n;
        int a=0,b=1,i=2;
        int sum=0;
        while(i<=n){
            sum=(a+b)%MOD;
            i++;
            a=b;
            b=sum;
        }
        return sum;
    }
};

//使用矩阵快速幂的思想：
/*
f(n+1)    1 1 n次方  f(1)
f(n)      1 0       f(0)


*/

class Solution {
public:
    const int MOD=1000000007;
    int fib(int n) {
        if (n<2)return n;
        vector<vector<long>> q{{1,1},{1,0}};
        vector<vector<long>> res=pow(q,n-1);
        return res[0][0];
    }

    vector<vector<long>> pow(vector<vector<long>>& a,int n){
        vector<vector<long>> ret{{1,0},{0,1}}; //每次有奇数的会存储到该ret中；
        while(n>0){
            if(n&1){ //如果是奇数次方；
                ret=multiply(ret,a);
            }
            n>>=1;//n除以2；
            a=multiply(a,a);
        }
        return ret;
    }

    vector<vector<long>> multiply(vector<vector<long>>& a,vector<vector<long>>& b){
        vector<vector<long>> c{{0,0},{0,0}};
        for(int i=0;i<2;++i)
            for(int j=0;j<2;j++){
                c[i][j]=(a[i][0]*b[0][j]+a[i][1]*b[1][j])%MOD;
            }
        return c;
    }
};




