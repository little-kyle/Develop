/*
地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），
也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。
但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？
*/

//广度优先搜索：
class Solution {
    int get(int x){
        int res=0;
        for(;x;x/=10){
            res+=x%10;
        }
        return res;
    }
public:
    int movingCount(int m, int n, int k) {
        if(!k) return 1; //表明k=0，所以只有原地一个格子可以到达；
        queue<pair<int,int>> Q; //创建一个队列表示机器人可以到达的格子；
        int dx[2]={0,1}; //用这种方式来表示向右移动；
        int dy[2]={1,0}; //表示向下移动一个格子；
        vector<vector<int>> vis(m,vector<int>(n,0));//这里创建了一个vector：vis，m行，每行都是一个vector，n个0；
        Q.push(make_pair(0,0)); //将初始的起点放到队列中；
        vis[0][0]=1;//将当前格子设置为可到达；
        int ans=1; //表示机器人一共可以到达的格子数量；
        while(!Q.empty()){
            auto [x,y]=Q.front(); //获取队列的队头元素；
            Q.pop(); //删除队列的队头元素；
            for(int i=0;i<2;++i){ //实现向右或者向下移动；
                int tx=dx[i]+x;
                int ty=dy[i]+y;
                //不满足边界条件，已经访问过（已经记录过），不满足各位和小于等于k
                if(tx<0||tx>=m||ty<0||ty>=n||vis[tx][ty]||get(tx)+get(ty)>k) continue;
                Q.push(make_pair(tx,ty)); //说明满足上述条件进队列；
                vis[tx][ty]=1;
                ans++;
            }
        }
        return ans;
    }
};

//递推：
class Solution{
    int get(int x){
        int res=0;
        for(;x;x/=10){
            res+=10;
        }
        return res;
    }
public:
    int movingCount(int m, int n, int k){
        if(!k) return 1;
        vector<vector<int>> vis(m,vector<int>(n,0));
        int ans=1;
        vis[0][0]=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if((i==0&&j==0)||get(i)+get(j)>k) continue; //不能满足条件或者处于边界就终止；
                if(i-1>=0) vis[i][j]|=vis[i-1][j];
                if(j-1>=0) vis[i][j]|=vis[i][j-1];
                ans+=vis[i][j];
            }
        }
        return ans;
    }
};