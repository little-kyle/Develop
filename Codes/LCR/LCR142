//给定两个以 有序链表 形式记录的训练计划 l1、l2，分别记录了两套核心肌群训练项目编号，
//请合并这两个训练计划，按训练项目编号 升序 记录于链表并返回。

//注意：新链表是通过拼接给定的两个链表的所有节点组成的


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* trainningPlan(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)return l2;
        if(l2==nullptr)return l1;
        ListNode* ptr1=l1;
        ListNode* ptr2=l2;

        ListNode* newnode=new ListNode(0);
        ListNode* newptr=newnode;

        while(ptr1 && ptr2){
            if(ptr1->val <= ptr2->val){
                newptr->next=ptr1;
                ptr1=ptr1->next;
                newptr=newptr->next;
            }else{
                newptr->next=ptr2;
                ptr2=ptr2->next;
                newptr=newptr->next;
            }
        }
        if(ptr1){
            newptr->next=ptr1;
        }
        if(ptr2){
            newptr->next=ptr2;
        }
        return newnode->next;
    }
};

//上述有错误：
class Solution {
public:
    ListNode* trainningPlan(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr) {
            return l2;
        } else if (l2 == nullptr) {
            return l1;
        } else if (l1->val < l2->val) {
            l1->next = trainningPlan(l1->next, l2);
            return l1;
        } else {
            l2->next = trainningPlan(l1, l2->next);
            return l2;
        }
    }
};


class Solution {
public:
    ListNode* trainningPlan(ListNode* l1, ListNode* l2) {
        ListNode* preHead = new ListNode(-1);

        ListNode* prev = preHead;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val < l2->val) {
                prev->next = l1;
                l1 = l1->next;
            } else {
                prev->next = l2;
                l2 = l2->next;
            }
            prev = prev->next;
        }

        // 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可
        prev->next = l1 == nullptr ? l2 : l1;

        return preHead->next;
    }
};


