//给定两棵二叉树 tree1 和 tree2，判断 tree2 是否以 tree1 的某个节点为根的子树具有 相同的结构和节点值 。
//注意，空树 不会是以 tree1 的某个节点为根的子树具有 相同的结构和节点值 。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        if(A==nullptr)return false;
        if(B==nullptr)return false; //这里出现错误，空树是不满足这个子结构的要求的；第一开始需要B=null返回false，后面用到返回true；
        TreeNode* left;
        TreeNode* right;
        if(A->val!=B->val){
            left=A->left;
            right=A->right;
            return (isSubStructure(left,B)||isSubStructure(right,B));
        }else{
            return (isSubStructure(A->left,B->left)&&(isSubStructure(A->right,B->right)));
        }
    }
};

//下面是解答：
class Solution{
public:
    bool isSubStructure(TreeNode* A,TreeNode* B){
        //要满足题目的要求，需要AB两个都不是空数目；
        return (A!=nullptr &&B!=nullptr) &&(recur(A,B) || isSubStructure(A->left,B) || isSubStructure(A->right,B));
    }
private:
    bool recur(TreeNode* A,TreeNode* B){
        if(B==nullptr) return true;//这里表明B已经遍历到叶子节点完了；
        if(A==nullptr || A->val!=B->val) return false;
        return recur(A->left,B->left)&&recur(A->right,B->right); 
    }
};
