//复杂链表的复制
//请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，
//每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==nullptr)return nullptr;
        Node* cur=head;
        unordered_map<Node*, Node*>map;
        while(cur!=nullptr){
            map[cur]=new Node(cur->val); //原节点->新节点的映射；
            cur=cur->next;
        }
        cur=head;
        while(cur!=nullptr){
            map[cur]->next=map[cur->next];
            map[cur]->random=map[cur->random];
            cur=cur->next;
        }
        return map[head];
    }
};


class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==nullptr)return nullptr;
        Node* cur=head;
        while(cur!=nullptr){
            Node* tmp=new Node(cur->val);
            tmp->next=cur->next;
            cur->next=tmp;
            cur=tmp->next;
        }
        cur=head;
        while(cur!=nullptr){
            if(cur->random!=nullptr){
                cur->next->random=cur->random->next;
            }
            cur=cur->next->next;
        }

        cur=head->next;
        Node* pre=head,*res=head->next;
        while(cur->next!=nullptr){
            pre->next=pre->next->next;
            cur->next=cur->next->next;
            pre=pre->next;
            cur=cur->next;
        }
        pre->next=nullptr;
        return res;
    }
};