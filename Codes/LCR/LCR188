//买卖芯片的最佳时机：
class Solution {
public:
    int bestTiming(vector<int>& prices) {
        int n=prices.size();
        vector<int> bestvec(n,0);
        int tmp=INT_MAX;
        for(int i=0;i<n;i++){
            if(prices[i]<tmp)tmp=prices[i]; //更新tmp的值，使其一直保持当前遍历之前值的最小值；
            if(tmp<prices[i])bestvec[i]=prices[i]-tmp;
        }
        int maxvalue=0;
        for(int i=0;i<n;i++){
            if(maxvalue<bestvec[i])maxvalue=bestvec[i];
        }
        return maxvalue;
    }
};
//时间复杂度：O(N)
//空间复杂度：O(N),因为使用了辅助容器；

class Solution {
public:
    int bestTiming(vector<int>& prices) {
        int cost=INT_MAX,profit=0; 
        for(int price:prices){
            cost=min(cost,price);//计算当前及之前所有的最小值；
            profit=max(profit,price-cost);
        }
        return profit;
    }
};
//时间复杂度：O(N),遍历一次数组；
//空间复杂度：O(1),不需要借助辅助数组；