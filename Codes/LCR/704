//二分查找的例子：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len=nums.size();
        return midsearch(nums,0,len-1,target);
    }

    int midsearch(vector<int>& nums, int start,int end, int target){
        if(end<start)return -1;
        int mid=start+(end-start)/2;
        if(nums[mid]==target)return mid;
        else if(nums[mid]>target)return midsearch(nums,start,mid-1,target);
        else return midsearch(nums,mid+1,end,target);
    }
};

//注意可以不使用函数递归，而是使用迭代的思想进行：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        while(left <= right){
            int mid = (right - left) / 2 + left;
            int num = nums[mid];
            if (num == target) {
                return mid;
            } else if (num > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return -1;
    }
};
