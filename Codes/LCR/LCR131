//现需要将一根长为正整数 bamboo_len 的竹子砍为若干段，每段长度均为正整数。请返回每段竹子长度的最大乘积是多少。
//就是减绳子的换一种说法：
class Solution {
public:
    int cuttingBamboo(int bamboo_len) {
        for(int i=1;i<bamboo_len;i++){
            return max(cuttingBamboo(bamboo_len-i)*i,bamboo_len);
        }
    }
};

//正确答案：使用动态规划的思想，需要使用一个辅助数组来进行记录；
class Solution {
public:
    int cuttingBamboo(int bamboo_len) {
        vector<int> dp(bamboo_len+1);
        for(int i=2;i<=bamboo_len;i++){ //从2开始进行遍历；
            int curMax=0;
            for(int j=1;j<i;j++){
                curMax=max(curMax,max(j*(i-j),j*dp[i-j]));
            }
            dp[i]=curMax;
        }
        return dp[bamboo_len];
    }
};

//方法二：对动态规划的优化：
class Solution{
public:
    int cuttingBamboo(int bamboo_len){
        if(bamboo_len<=3){
            return bamboo_len-1;
        }
        vector<int> dp(bamboo_len+1);
        dp[2]=1;
        for(int i=3;i<=bamboo_len;i++){
            dp[i]=max(max(2*(i-2),2*dp[i-2]),max(3*(i-3),3*dp[i-3]));
        }
        return dp[bamboo_len];
    }
};