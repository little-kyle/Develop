//一棵圣诞树记作根节点为 root 的二叉树，节点值为该位置装饰彩灯的颜色编号。请按照如下规则记录彩灯装饰结果：

//第一层按照从左到右的顺序记录
//除第一层外每一层的记录顺序均与上一层相反。即第一层为从左到右，第二层为从右到左。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> decorateRecord(TreeNode* root) {
        if(!root)return {};
        queue<TreeNode*> que;
        vector<vector<int>> res;
        que.push(root);
        int j=0;
        while(!que.empty()){
            vector<int> tmp;
            for(int i=que.size();i>0;i--){
                TreeNode* cur=que.front();
                tmp.push_back(cur->val);
                que.pop();
                if(cur->left)que.push(cur->left);
                if(cur->right)que.push(cur->right);
            }
            if(j%2==1)reverse(tmp.begin(),tmp.end());
            res.push_back(tmp);
            j++;
        }
        return res;
    }
};
//上述时间复杂度为O(n),空间复杂度为O(n);



//下面使用双端队列进行：
class Solution {
public:
    vector<vector<int>> decorateRecord(TreeNode* root) {
        if(!root)return {};
        deque<TreeNode*> que;
        vector<vector<int>> res;
        que.push_front(root);
        while(!que.empty()){
            vector<int> tmp;
            for(int i=que.size();i>0;i--){
                TreeNode* cur=que.front();
                tmp.push_back(cur->val);
                que.pop_front();
                if(cur->left)que.push_back(cur->left);
                if(cur->right)que.push_back(cur->right);
            }
            res.push_back(tmp);
            tmp.clear();
            if(que.empty())return res;
            for(int i=que.size();i>0;i--){
                TreeNode* cur=que.back();
                tmp.push_back(cur->val);
                que.pop_back();
                if(cur->right)que.push_front(cur->right);
                if(cur->left)que.push_front(cur->left);
            }
            res.push_back(tmp);
        }
        return res;
    }
};




 