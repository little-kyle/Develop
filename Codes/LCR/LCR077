//给定链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表；
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

//主要是对链表进行排序的问题，因为链表不是数组不可以进行随机读写，

//对链表自顶向下归并排序：
/*
1.找到链表的中点，将链表拆分成两个子链表；寻找链表的中点可以使用快慢指针做法，快指针每次移动两步；慢指针每次移动一步，当快指针移动到链表的末尾时，慢指针指向链表的中点；
2.对两个子链表进行排序；
3.将两个分开排序的链表合并
*/
 
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        return sortList(head,nullptr);
    }

    ListNode* sortList(ListNode* head,ListNode* tail){
        if(head==nullptr)return head; //表明需要排序的链表是空的；
        if(head->next==tail){ //也就是当前的子链表的head后一个就是tail了；
            head->next=nullptr;
            return head;
        }
        ListNode* slow=head,*fast=head; //快慢指针用于找到链表的中点；
        while(fast!=tail){
            slow=slow->next;
            fast=fast->next;
            if(fast!=tail){ //如果快指针还没有到达最后的tail则，再向后移动一步；
                fast=fast->next;
            }
        }
        ListNode* mid=slow;//快指针已经到达tail末尾，则慢指针就是指向的链表的中点；
        return merge(sortList(head,mid),sortList(mid,tail));//排序的过程是在合并的时候进行的；
    }

    ListNode* merge(ListNode* head1,ListNode* head2){ //合并两个子链表，排序的过程就是在合并链表的时候实现的；
        ListNode* dummyHead=new ListNode(0);
        ListNode* temp=dummyHead,*temp1=head1,*temp2=head2; //head1和head2分别对应了待合并的两个链表的head头指针；
        while(temp1!=nullptr && temp2!=nullptr){ //开始合并两个链表，主要是按照一定的顺序进行；
            if(temp1->val <=temp2->val){
                temp->next=temp1;
                temp1=temp1->next;
            }else{
                temp->next=temp2;
                temp2=temp2->next;
            }
            temp=temp->next;
        } //剩下的链表接在末尾；
        if(temp1!=nullptr){
            temp->next=temp1;
        }else if(temp2!=nullptr){
            temp->next=temp2;
        }
        return dummyHead->next;
    }
};

//自底向上的归并排序；首先求的链表的长度length，然后将链表拆分成子链表进行合并；
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head==nullptr)return head;
        int length=0;
        ListNode* node=head;
        while(node!=nullptr){
            length++; //计算链表的长度；
            node=node->next;
        }
        ListNode* dummyHead=new ListNode(0,head); //创建一个新的链表节点，其值为0，指向的地点是head；这里的dummyHead是虚拟头节点，指向真正head；
        for(int subLength=1;subLength<length;subLength<<=1){ //对于每一个子链表，从长度为1开始，每次×2（右移一位）；
            ListNode* prev=dummyHead,*curr=dummyHead->next;
            while(curr!=nullptr){
                ListNode* head1=curr;//第一个子链表的开始指针；
                for(int i=1;i<subLength&&curr->next!=nullptr;i++){ //这里对subLength长度的子链表进行遍历；
                    curr=curr->next;
                }
                //---------------------------------------------
                ListNode* head2=curr->next; //第二个子链表的开始指针；
                curr->next=nullptr;
                curr=head2;
                for(int i=1;i<subLength&&curr!=nullptr&&curr->next!=nullptr;i++){
                    curr=curr->next;
                }
                ListNode* next=nullptr;
                if(curr!=nullptr){
                    next=curr->next;
                    curr->next=nullptr;
                }
                ListNode* merged=merge(head1,head2);
                prev->next=merged; //合并之后的链表指针；
                while(prev->next!=nullptr){
                    prev=prev->next;
                }
                curr=next;
            }
        }
        return dummyHead->next;
    }
    ListNode* merge(ListNode* head1,ListNode* head2){
        ListNode* dummyHead=new ListNode(0);
        ListNode* temp=dummyHead,*temp1=head1,*temp2=head2;
        while(temp1!=nullptr&&temp2!=nullptr){
            if(temp1->val <=temp2->val){
                temp->next=temp1;
                temp1=temp1->next;
            }else{
                temp->next=temp2;
                temp2=temp2->next;
            }
            temp=temp->next;
        }
        if(temp1!=nullptr){
            temp->next=temp1;
        }else if(temp2!=nullptr){
            temp->next=temp2;
        }
        return dummyHead->next;
    }
};