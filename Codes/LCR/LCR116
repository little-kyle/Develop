//省份数量；其中的isConnected中的值表示对应的两个城市之间是否相连；
//初步思路是，建立一个对应城市的辅助数组，表示该城市是否已经加入到某一个省份中；使用深度优先搜索进行遍历；

/*
官方思路：
把n个城市和他们之间的相连关系看作是图，城市是图中的节点，相连关系是图中的边，
给定矩阵isConnected是图的邻接矩阵，省份数量就是图的连通份量；
主要有三种方法：
1.深度优先
2.广度优先
3.并查集
*/

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        num_city=isConnected.length; //行数表示一共包含多少个城市；
        vector<bool> isPro(num_city,false); //设置一个辅助数组；
        int num_province=0;
        for(int i=0;i<num_city,i++){ //遍历每一个城市进行检查；
            for(int j=i+1;j<num_city;j++){
                if(isConnected[i][j]&&isPro[j]){ //表示这两个城市直接相连,且当前的j城市还没有加入到任何的省份中；

                }
            }
        }

    }
};
//==========================================================================================================

//深度优先：
class Solution{
public:
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int cities, int i){ //每次以i号城市为主进行判断其余城市和其关系；
        for(int j=0;j<cities;j++){
            if(isConnected[i][j]==1&&!visited[j]){ //如果后面的城市和i有链接且尚未访问到，则设定访问到；以该新的邻居城市进行扩散查找；
                visited[j]=1;
                dfs(isConnected,visited,cities,j);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected){
        int cities=isConnected.size(); //获取城市的数量；
        vector<int> visited(cities); //创建一个长度为城市数量的辅助数组；
        int provinces=0;
        for(int i=0;i<cities;i++){ //对每一个城市进行深度优先遍历；
            if(!visited[i]){ 
                dfs(isConnected,visited,cities,i);
                provinces++;
            }
        }
        return provinces;
    }
};


//广度优先：每一个城市的邻居城市排队进行处理；
class Solution{
public:
    int findCircleNum(vector<vector<int>>& isConnected){
        int cities=isConnected.size();
        vector<int> visited(cities);
        int provinces=0;
        queue<int> Q; //创建一个队列；
        for(int i=0;i<cities;i++){
            if(!visited[i]){
                Q.push(i); //表示一个新的省份的城市；
                while(!Q.empty()){
                    int j=Q.front();
                    Q.pop();
                    visited[j]=1;//设定该城市访问过；
                    for(int k=0;k<cities;k++){ //对当前的没有访问的城市分别和其余的未访问的城市进行检查；
                        if(isConnected[j][k]==1&& !visited[k]){
                            Q.push(k);
                        }
                    }
                }
                provinces++;
            }
        }
        return provinces;
    }
};

//并查集
class Solution{
public:
    int Find(vector<int>& parent,int index){
        if(parent[index]!=index){ //表明该城市节点是附属于其他的城市节点下的；
            parent[index]=Find(parent,parent[index]); //那么就追溯到最顶头的父节点；
        }
        return parent[index];
    }

    void Union(vector<int>& parent,int index1,int index2){ //将两个城市的父节点都设置相同；
        parent[Find(parent,index1)]=Find(parent,index2);
    }

    int findCircleNum(vector<vector<int>>& isConnected){
        int cities=isConnected.size();
        vector<int> parent(cities);
        for(int i=0;i<cities;i++){
            parent[i]=i;
        }
        for(int i=0;i<cities;i++){
            for(int j=i+1;j<cities;j++){
                if(isConnected[i][j]==1){
                    Union(parent,i,j); //表示两个城市有链接则将两个都放到一个集合中；
                }
            }
        }
        int provinces=0;
        for(int i=0;i<cities;i++){
            if(parent[i]==i){
                provinces++;
            }
        }
        return provinces;
    }
};