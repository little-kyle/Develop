//给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。


class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        //首先找到正负数区分的地方；
        int i=0; //i是第一个正数；
        for(i;i<nums.size();i++){
            if(nums[i]>0)break;
        }
        //下面设置两个指针；
        int left=i-1;
        int right=i;
        vector<int> res;
        while(left>=0 && right<nums.size()){
            if(nums[left]*nums[left]>nums[right]*nums[right]){
                res.push_back(nums[right]*nums[right]);
                right++;
            }else{
                res.push_back(nums[left]*nums[left]);
                left--;
            }
        }
        while(left>=0){
            res.push_back(nums[left]*nums[left]);
            left--;
        }
        while(right<nums.size()){
            res.push_back(nums[right]*nums[right]);
            right++;
        }
        return res;
    }
};