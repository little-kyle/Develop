//跳跃训练（青蛙跳台阶）


//动态规划：
class Solution {
public:
    const int MOD = 1000000007;
    int trainWays(int num) {
        int a=1,b=1,c=2;
        if(num==0 || num==1)return 1;
        if(num==2)return 2;
        int i=3;
        int sum;
        while(i<=num){
            sum=(b+c)%MOD;
            i++;
            b=c;
            c=sum;
        }
        return sum;
    }
};

//矩阵快速幂：
class Solution {
public:
    const int MOD = 1000000007;
    int trainWays(int num) {
        int a=1,b=1,c=2;
        if(num==0 || num==1)return 1;
        if(num==2)return 2;
        vector<vector<long>> q{{1, 1}, {1, 0}};
        vector<vector<long>> res = pow(q, n - 1);
        return res[0][0];
    }
    vector<vector<long>> pow(vector<vector<long>>& a, int n){
        vector<vector<long>> ret={{1,0},{0,1}};
        while(n>0){
            if(n&1){
            ret=multiply(ret,a);
            }
            n>>=1;
            a=multiply(a,a);
        }
        return ret;
    }

    vector<vector<long>> multiply(vector<vector<long>>& a, vector<vector<long>>& b) {
        vector<vector<long>> c{{0, 0}, {0, 0}};
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                c[i][j] = (a[i][0] * b[0][j] + a[i][1] * b[1][j]) % MOD;
            }
        }
        return c;
    }
};


